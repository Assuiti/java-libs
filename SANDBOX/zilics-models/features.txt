New features for Zilics-Models (ZM)

Feature 1) Immutable Objects

One of the desirable requirements of the new ZM is the ability to turn the objects immutable. New this is possible by invoking "setImmutable (true)" on the corresponding object. An object is called "immutable" when it is not possible to change its internal state (that is, the field values).

Any attempt to call a "set" method on this instance will throw an exception "ImmutableException", and the return value of a "get" method will be an immutable object too (this will work on List, Set and Map instances too).

The "setImmutable()" method acts in a transitive way, and it navigates through the tree of relationships between objects. That is, if you call "setImmutable" on an instance A, that references an instance B, then B automatically becomes immutable as well. More precisely, suppose that you have 3 classes:

class A extends RMObject {
  private List<B> listB;
  ...
}
class B extends RMObject {
  private C value;
}

class C extends RMObject {
}

If we have an instance "x" of class A, whose attribute "listB" constains an instance "y" of class B, an "y" constains an instance "z" in its attribute "value", then if you call "x.setImmutable(true)", "y" and "z" will become immutable too.



Feature 2) New "hashCode" and "equals" methods

Now there are new "equals" and "hashCode" methods that use the Java Reflection API and annotation "@EqualsField" to determine their return values. Therefore only the fields annotated with @EqualsField are considered to check if two instances are equals, and by chosing carefully which fields should be annotated, it is possible to avoid circular references (this is not possible if you use the commons-lang reflective hashCode).



Feature 3) Object validation (static validation)

A new mechanism of protection has been added to the ZM: the validation of objects. Since the objects are now mutable, how we can assure that an instance is well constructed? If you work on an ill-defined instance then it is very likely to your software to not behave correctly. For example: Say that you have an instance "x" of DvCodedText: you know that x.getDefiningCode() should return a not null instance of CodePhrase and that x.getDefiningCode().getCodeString() must return a not empty string. What happens if you are not sure that "getDefinigCode ()" returns a valid object, or that "getCodeString ()" returns a not empty string? You have to be inserting many "if's" every time you use a DvCodedText, or simply ignores it and wait for the bug to occur. Both solutions are uggly.


Now with the new mechanism of validation you can solve this problem by annotating the field "definingCode" of DvCodedText with the annotation "@NotNull" and the field "codeString" of CodePhrase with "@NotEmpty" annotation. The ZM will handle the validation, because each "RMObject" has 2 methods:
  
   (1) public void validate () throws ValidateException;
   (2) public void validate (ValidationResult result);
  
   These methods validate the objects of ZM, and the first method throws an exception (This exception contains a list of all errors found during validation) if the validation has failed and the second method returns only list of errors found in the "result" parameter.
   If your class needs a more complex validation (which is not possible only using @NotNull and @NotEmpty), just override the method:
  
   protected void performValidation (ValidationResult result);
  
   We can use the example of ArchetypeID, whose "value" attribute has a specific format that matches a regular expression.

   Remember that validation (as well as the immutability) is transitive! That is, if an object is validated, all the objects referenced by him (and so on) are also automatically validated.
   
   
Feature 4) The Introspector
	
The Introspector is the kernel of many new features of ZM. It works with the Java Reflection API and annotations. (it understands the annotations: "@Ignore", "@RmClass", "@RmField", "@EqualsField", "@NotNull", "@NotEmpty" and "@MapItem")

The annotations @RmField and @RmClass allow us to give the "official names" of classes and fields: for example, the official name of the CodePhrase class is "CODE_PHRASE" (to be conform with the specification) and the official name is used on several points: in the XML, in the "rmTypeName" of "CComplexObject" and so on. Another annotation that the Introspector uses is the @Ignore that makes introspector simply ignore the field annotated with it (for example when the field is not part of XML).
  
A major difficulty encountered while programming the new Introspector was the use of Generics in Java. There is no way to know that an instance of List is actually an instance of List<Integer> only by instance itself ... for that you must have access who declared that instance (either a field declaration, or a local variable declaration or a method parameter declaration, etc). So the GenericsResolver was created to navigate the fields of classes while keeping information on the TypeVariable of generic classes:

public interface GenericsResolver extends Serializable {
	public Class<?> getResolvedClass();
	public GenericsResolver getEnclosingResolver();
	
	public GenericsResolver resolveTypeParameter(String typeParameterName) throws IntrospectorException;
	public GenericsResolver resolveField(Field field) throws IntrospectorException;
	public GenericsResolver resolveSuperclass() throws IntrospectorException;
	public GenericsResolver resolveType(Type type) throws IntrospectorException;
}

With an instance of GenericsResolver you can navigate through a field of the class "getResolvedClass()" through "resolveField (field)", or the superclass way "resolveSuperclass ()" and so on.

Example:

class A extends RMObject (
   private List <Map <String, A>> complexField;
)

And let x = BaseResolver.makeInstance (A.class);
then:

   x.getResolvedClass() == A.class
   x.resolveField(A.class.getDeclaredField ("complexField")).getResolvedClass () == List.class
   x.resolveField(A.class.getDeclaredField ("complexField")).resolveTypeParameter("E"). getResolvedClass() == Map.class
   x.resolveField(A.class.getDeclaredField ("complexField")). resolveTypeParameter("E"). resolveTypeParameter("K") == String.class
  
In other words, the resolver can browse generic types and generic fields!


Feature 5) New XML parser/serializer

  The new parser/serializer decreased dramatically its size because of the new Introspector.
  
Feature 6) New ADL parser/serializer

  Based entirely (almost a copy) of the ADL parser of the ref_impl_java project.

Feature 7) A-path language
   	
  A query language for archetypes/templates/compositions based on Xpath. This prototype is an alternative to the AQL. (Documentation elsewhere)

Feature 8) New Archetype model (Walker part 1)

The new model of archetypes is a part of the Walker. To use it just call the "validate()" method and behind the scenes, the it will do:

   -> Resolve the "ArchetypeInternalReference"'s
   -> Resolve the canonical paths of all ArchetypeConstraint's
   -> Check if the correspoding constraint matches the corresponding RM class with same attributes.
    (For example, if a CComplexObject of "ELEMENT" was defined in the archetype with a CAttribute "banana", then the validation will fail because the class "Element" does not have an attribute "banana")
   -> Insert "missing" pieces in archetype
   (For example, the attribute "time" for an Event is required, and therefore a CComplexObject of an "EVENT" shall contain a CAttribute "time" in it to indicate this requirement).
   -> Differentiate anonymous siblings
   (For example in the choice below:
   
	ELEMENT[at0017] occurrences matches {0..1} matches {
		value matches {
			DV_URI matches {*}
			DV_COUNT matches {*}
		}
	}
  
   The anonymous siblings "DV_URI" and "DV_COUNT" have the same path, causing confusion!
   So the walker differentiate them by using paths: "...[at0017]/value[1]" and "...[at0017]/value[2]"
   )
   -> It is possible to perform A-path queries on archetype instances

  
Feature 9) New Template model (Walker part 2)

   To use the new template model, just call "resolveArchetypes(Map)" with an Map of archetypes indexed by the archetype id and then call "validate()" on the template instance.
   It is possible to walk through the the constraint by the use of "getRootConstraint()" or "getConstraintFromPath" that uses the full path to reach the constraint.


Feature 11) New Locatable model (Walker part 3)

   Capable of performing A-path queries.

Feature 10) Semantic Validation (dynamic validation)

  The ZM is able to perform semantic validation (validate an instance of COMPOSITION to the correspoding template that generated it). Suppose that you have an Template instance "t" and a Composition instance "c". To validate "c" against "t", just call "t.semanticValidation(c)". In cas of and Archetype instance "a", call "a.semanticValidation(c)".
  
Feature 9) New metadata attribute

  To solve some recurring problems (how to pass GUI-hints from the Template/Archetype to the WEB interface, how to mark the fields for pupulation queries (eg. how many people has more than 1.8m height, what is the average age of people with some disease, etc), etc) a "metadata" attribute was inserted in the Template/Archetype model.
  
  Each CObject (and each TemplateConstraint) now has an "metadata" field that it is a Map<String, String> indexed by the metadata name. For example, if you want to mark some CObject as an "search field", you could use cobj.getMetadata().put("search", "true");
  
  Right now the metadata is not Locale dependant, but it will be in the future.
  
  

